#!/usr/bin/env python
'''
This node gets tf transforms for april tags
'''

import time
import random

import rospy
import tf
import numpy as np
from geometry_msgs.msg import Pose2D

class april_tags:
    def __init__(self):
        '''
        Initialise topics and some parameters used in the algorithm.
        '''
        self.listener = tf.TransformListener()

        # The list of all april tags
        # self.target_frame = 'target'
        # self.ee_frame = 'ee'
        # self.block_frames_list = ['block1','block2', 'block3', 'block4', 'block5']

    def get_transform_between_frames(self, reference_frame, target_frame):
        time_out = 0.3
        start_time = time.time()
        while(True):
            try:
                translation_vector, rotation_quaternions = self.listener.lookupTransform(
                                                      reference_frame,
                                                      target_frame,
                                                      rospy.Time(0))
                break
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                if((time.time()- start_time) > time_out):
                    return None
        return translation_vector

    def get_tranforms(self):
        target_to_tag_transform = self.get_transform_between_frames('block2', 'target')
        tag_to_ee_transform = self.get_transform_between_frames('block2', 'ee')
        rospy.loginfo("Target tf: %s", target_to_tag_transform)
        rospy.loginfo("EE tf: %s", tag_to_ee_transform)


def main():
    rospy.init_node('computer_vision')
    aprilTags = april_tags()
    aprilTags.get_tranforms()
    rospy.spin()

if __name__=='__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
